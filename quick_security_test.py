#!/usr/bin/env python3
"""
Test rapide et simple pour valider les corrections de s√©curit√©
"""

import socket
import time
import subprocess
import os
import signal

def test_path_traversal():
    """Test simple de path traversal"""
    print("üîí Test Path Traversal...")
    
    # D√©marrer le serveur
    server = subprocess.Popen(
        ["./webserv", "config.conf"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    time.sleep(3)  # Attendre le d√©marrage
    
    try:
        # Test d'attaque path traversal
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect(("localhost", 8081))
        
        # Tentative d'acc√®s √† /etc/passwd
        attack_request = "GET /../../../etc/passwd HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n"
        sock.send(attack_request.encode())
        
        response = sock.recv(4096).decode()
        sock.close()
        
        # V√©rifier que l'attaque est bloqu√©e
        if "root:" not in response and ("404" in response or "403" in response or "400" in response):
            print("‚úÖ Path traversal BLOQU√â - S√©curit√© OK")
            return True
        else:
            print("‚ùå Path traversal NON BLOQU√â - Probl√®me de s√©curit√©")
            print(f"R√©ponse: {response[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False
    finally:
        server.terminate()
        server.wait()

def test_buffer_size():
    """Test de la gestion des gros buffers"""
    print("üõ°Ô∏è Test Buffer Size...")
    
    server = subprocess.Popen(
        ["./webserv", "config.conf"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    time.sleep(3)
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        sock.connect(("localhost", 8081))
        
        # Test avec un gros body (20KB)
        large_body = "A" * 20480
        request = f"POST /test HTTP/1.1\r\nHost: localhost\r\nContent-Length: {len(large_body)}\r\nConnection: close\r\n\r\n{large_body}"
        
        sock.send(request.encode())
        response = sock.recv(4096).decode()
        sock.close()
        
        if "HTTP/" in response:
            print("‚úÖ Gros buffers g√©r√©s correctement")
            return True
        else:
            print("‚ùå Probl√®me avec les gros buffers")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test buffer: {e}")
        return False
    finally:
        server.terminate()
        server.wait()

def main():
    print("üöÄ TESTS DE VALIDATION DES CORRECTIONS")
    print("=" * 50)
    
    if not os.path.exists("./webserv"):
        print("‚ùå Serveur webserv introuvable")
        return
    
    results = []
    results.append(test_path_traversal())
    results.append(test_buffer_size())
    
    print("\nüìä R√âSULTATS")
    print("=" * 50)
    passed = sum(results)
    total = len(results)
    
    print(f"Tests r√©ussis: {passed}/{total}")
    
    if passed == total:
        print("üéâ TOUTES LES CORRECTIONS FONCTIONNENT!")
    else:
        print("‚ö†Ô∏è Certaines corrections n√©cessitent plus de travail")

if __name__ == "__main__":
    main()
